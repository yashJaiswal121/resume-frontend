{"version":3,"sources":["CellComponent/index.jsx","App.js","serviceWorker.js","index.js"],"names":["CellComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","chang","state","textt","clicked","color","handleClicked","bind","assertThisInitialized","setState","react_default","a","createElement","style","backgroundColor","onClick","React","Component","App","c","cols","elemt","arr_cols","i","dimension","id","toString","src_CellComponent","push","rows","arr_rows","checkResult","j","firstcell","document","getElementById","innerText","console","log","dimen","Number","tabl","width","height","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MA6DeA,cAxDf,SAAAA,EAAYC,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACIE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,MAAM,WAEF,MAAqB,KAAlBP,EAAKQ,MAAMC,MACP,IAEA,KAVPT,EAAKQ,MAAM,CAACE,QAAQ,EAAEC,MAAM,QAASF,MAAM,KAC3CT,EAAKY,cAAcZ,EAAKY,cAAcC,KAAnBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAHvBA,+EAgBIG,KAAKY,SACD,CAACL,QAAQ,EAAEC,MAAM,MAAOF,MAAMN,KAAKI,2CAcvC,OACIS,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,gBAAiBjB,KAAKK,MAAMG,OAASU,QAASlB,KAAKS,eAE5DT,KAAKK,MAAMC,cArCKa,IAAMC,WCoGnBC,cAhGX,SAAAA,EAAYzB,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACExB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMJ,KAKR0B,EAAE,EANFzB,EAOA0B,KAAK,WAGD,IAFF,IACIC,EADAC,EAAS,GAEHC,EAAE,EAAEA,GAAG1B,KAAKK,MAAMsB,UAAUD,IACnC1B,KAAKsB,IACJE,EAAMX,EAAAC,EAAAC,cAAA,MAAIa,GAAI5B,KAAKsB,EAAEO,YACvBhB,EAAAC,EAAAC,cAACe,EAAD,OAEEL,EAASM,KAAKP,GAGhB,OAAOC,GAlBX5B,EAsBAmC,KAAK,WAGL,IAFA,IACIR,EADAS,EAAS,GAELP,EAAE,EAAEA,GAAG7B,EAAKQ,MAAMsB,UAAUD,IAClCF,EAAMX,EAAAC,EAAAC,cAAA,UAAKlB,EAAK0B,OAAV,KACNU,EAASF,KAAKP,GAGhB,OAAOS,GA5BLpC,EAAKQ,MAAO,CAACsB,UAAW9B,EAAKD,MAAM+B,WAClC9B,EAAKqC,YAAYrC,EAAKqC,YAAYxB,KAAjBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAHpBA,6EAoCI,IAAI6B,EAAE,EAAES,EAAE,EACNC,EAAUC,SAASC,eAAe,KAAKC,UAG1C,IAAIb,EAAE,EAAEA,GAAG1B,KAAKK,MAAMsB,UAAUD,IAI7B,GAAKW,SAASC,eAAeZ,EAAEG,YAAYU,WAAaH,EACxD,CAACI,QAAQC,IAAIL,EAAW,uBACxB,MAKZ,IAAIM,EAAM1C,KAAKK,MAAMsB,UAGZ,IAAQQ,EAAE,EAAEA,EAAEO,EAAMA,GAEbL,SAASC,eAAeH,EAAEN,YAAYU,WAAaH,GAEvDI,QAAQC,IAAIL,EAAW,oBAGxBD,GAAIQ,OAAOD,oCAqBlB,IAAME,EAAK/B,EAAAC,EAAAC,cAAA,SAAO8B,MAAM,MAAMC,OAAO,OACpC9C,KAAKgC,QAGN,OACEnB,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACfH,EACD/B,EAAAC,EAAAC,cAAA,UAAQG,QAASlB,KAAKkC,aAAtB,wBA7Faf,IAAMC,WCQJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,CAAK5B,UAAU,MAAQU,SAASC,eAAe,SD2HzD,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dfb68942.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\n\nclass CellComponent extends React.Component{\n\nconstructor(props)\n{\n    super(props);\n    this.state={clicked:0,color:'green', textt:'0'};\n    this.handleClicked=this.handleClicked.bind(this);\n\n}\n\nchang=()=>{\n\n    if(this.state.textt=='0')\n    return 'x';\n    else\n    return '0';\n}\n\nhandleClicked(){\n    this.setState(\n        {clicked:1,color:'red', textt:this.chang()\n    }\n    );\n\n    \n}\n\n\n\n\nrender()\n{\n  \n\n    return(\n        <div style={{backgroundColor: this.state.color }} onClick={this.handleClicked} >\n\n           {this.state.textt}\n        \n          </div>  \n\n        // <div style={{backgroundColor: \"red\"}} >\n        //     hello world\n        // </div>\n\n    );\n\n\n\n}\n\n\n\n\n\n\n}\n\nexport default CellComponent;","import React, { Component } from 'react';\nimport CellComponent from './CellComponent';\nimport ReactDOM from 'react-dom';\n\nclass App extends React.Component {\n\n\n    constructor(props)\n    {\n      super(props);\n      this.state= {dimension: this.props.dimension};\n       this.checkResult=this.checkResult.bind(this);\n    }\n\n    c=0;\n    cols=function(){    //or cols=()=>{\n      var arr_cols=[];\n      var elemt;\n        for(var i=1;i<=this.state.dimension;i++){\n         this.c++;\n          elemt=<td id={this.c.toString()} >\n        <CellComponent  />\n          </td>; //here 'this' is imp to refer 'c' as it is a global \n          arr_cols.push(elemt);\n\n        } \n        return arr_cols;\n    }\n\n\n    rows=()=>{\n    var arr_rows=[];\n    var elemt;\n    for(var i=1;i<=this.state.dimension;i++){\n      elemt=<tr>{this.cols()} </tr>;  //here 'this' is important in calling 'cols' as it is a global property\n      arr_rows.push(elemt);\n\n    }\n    return arr_rows;\n\n    }\n\n    checkResult(){\n      //case1\n        var i=1,j=1;\n        var firstcell=document.getElementById(\"1\").innerText;\n     \n      //horizontal\n         for(i=1;i<=this.state.dimension;i++)\n         {\n\n\n            if(!(document.getElementById(i.toString()).innerText == firstcell) )\n            {console.log(firstcell +\" lost!!! horizontal\");\n            break;\n            }\n         \n        \n          }\nvar dimen=this.state.dimension;\n\n           //vertical\n         for(var j=1;j<dimen*dimen;)\n          {\n           if(!(document.getElementById(j.toString()).innerText == firstcell) )\n          {\n            console.log(firstcell +\" lost!!!vertical\");\n             //break;\n           }\n           j=j+Number(dimen);\n           //console.log(j);\n        \n           }\n        \n           //diagnal\n           \n\n\n      //case2\n\n\n      //case3\n\n\n      //case4\n\n    }\n\n  render() {\n  \n    const tabl=<table width='200' height='200'>\n    {this.rows()}\n     </table>;\n\n    return (\n      <div className=\"App\">\n     {tabl}\n     <button onClick={this.checkResult}>Check Result</button>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App dimension='4' />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}